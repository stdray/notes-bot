using Rebus.Handlers;
using Rebus.Bus;
using TelegramObsidianBot.Shared.Contracts;
using Microsoft.Extensions.Options;
using TelegramObsidianBot.Shared.Common;

namespace TelegramObsidianBot.Features.ObsidianIntegration.CreateNote;

/// <summary>
/// Обработчик готовой заметки для Obsidian
/// Создает файл в папке Obsidian
/// </summary>
public class ObsidianNoteReadyHandler(
  IOptions<ObsidianConfiguration> config,
  IBus bus,
  ILogger<ObsidianNoteReadyHandler> logger) : IHandleMessages<ObsidianNoteReady>
{
  public async Task Handle(ObsidianNoteReady message)
  {
    // Логирование начала обработки
    logger.LogInformation("Started processing {MessageType} for ChatId {ChatId} | {CorrelationId}",
      nameof(ObsidianNoteReady), message.ChatId, message.CorrelationId);

    try
    {
      // Создаем содержимое заметки в формате Markdown
      var noteContent = CreateMarkdownContent(message);
      
      // Генерируем имя файла
      var fileName = GenerateFileName(message.Title);
      var filePath = Path.Combine(config.Value.VaultPath, config.Value.DefaultFolder, fileName);

      // Создаем папку если не существует
      var directory = Path.GetDirectoryName(filePath);
      if (directory != null && !Directory.Exists(directory))
      {
        Directory.CreateDirectory(directory);
      }

      // Записываем файл
      await File.WriteAllTextAsync(filePath, noteContent);

      logger.LogInformation("Created Obsidian note at {FilePath} | {CorrelationId}",
        filePath, message.CorrelationId);

      // Отправляем уведомление о создании заметки
      await bus.Send(new ObsidianNoteCreated(
        filePath,
        message.ChatId,
        message.MessageId,
        message.CorrelationId));

      // Логирование успешного завершения
      logger.LogInformation("Completed processing {MessageType} for ChatId {ChatId} | {CorrelationId}",
        nameof(ObsidianNoteReady), message.ChatId, message.CorrelationId);
    }
    catch (Exception ex)
    {
      // Логирование ошибки
      logger.LogError(ex, "Failed processing {MessageType} for ChatId {ChatId} | {CorrelationId}",
        nameof(ObsidianNoteReady), message.ChatId, message.CorrelationId);
      throw;
    }
  }

  private static string CreateMarkdownContent(ObsidianNoteReady message)
  {
    var tags = string.Join(" ", message.Tags.Select(t => $"#{t}"));
    var timestamp = DateTimeOffset.Now.ToString("yyyy-MM-dd HH:mm:ss");

    return $"""
      ---
      tags: [{string.Join(", ", message.Tags)}]
      source: {message.SourceUrl}
      created: {timestamp}
      chat_id: {message.ChatId}
      message_id: {message.MessageId}
      ---

      # {message.Title}

      {tags}

      ## Content

      {message.Content}

      ## Source
      
      {message.SourceUrl}

      ---
      *Auto-generated by TelegramObsidianBot*
      """;
  }

  private static string GenerateFileName(string title)
  {
    // Очищаем заголовок для использования в имени файла
    var cleanTitle = title
      .Replace(" ", "-")
      .Replace("/", "-")
      .Replace("\\", "-")
      .Replace(":", "")
      .Replace("*", "")
      .Replace("?", "")
      .Replace("\"", "")
      .Replace("<", "")
      .Replace(">", "")
      .Replace("|", "")
      .ToLowerInvariant();

    var timestamp = DateTimeOffset.Now.ToString("yyyyMMdd-HHmmss");
    return $"{timestamp}-{cleanTitle}.md";
  }
}